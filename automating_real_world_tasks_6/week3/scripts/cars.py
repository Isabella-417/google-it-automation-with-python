#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.Returns a list of lines that summarize the information."""
    locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
    max_revenue = {"revenue": 0}
    max_total_sales = {"total_sales": 0, "model": ""}
    dictionary_year = {}

    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price

        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

         # Calculate the car model which had the most sales
        item_total_sales = item["total_sales"]

        # TODO: also handle max sales
        if item_total_sales > max_total_sales["total_sales"]:
            max_total_sales["total_sales"] = item_total_sales
            max_total_sales["model"] = item["car"]["car_model"]

        # TODO: also handle most popular car_year

        if str(item["car"]["car_year"]) not in dictionary_year:
            dictionary_year[str(item["car"]["car_year"])
                            ] = int(item["total_sales"])
        else:
            dictionary_year[str(item["car"]["car_year"])
                            ] += int(item["total_sales"])

    # order by value
    sort_years = sorted(dictionary_year.items(),
                        key=lambda x: x[1], reverse=True)
    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            max_total_sales["model"], max_total_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(
            sort_years[0][0], sort_years[0][1])
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(
            item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("../car_sales.json")
    summary = process_data(data)
    formatted_summary = "<br\>".join(summary)
    path = "tmp/cars.pdf"  # change to /tmp/

    # TODO: turn this into a PDF report
    reports.generate(path, "Sales summary for last month",
                     formatted_summary, cars_dict_to_table(data))

    # TODO: send the PDF report as an email attachment
    msg = emails.generate("automation@example.com",
                          "<user>@example.com",  # add user
                          "Sales summary for last month",
                          "\n".join(summary),
                          path
                          )
    emails.send(msg)


if __name__ == "__main__":
    main(sys.argv)
